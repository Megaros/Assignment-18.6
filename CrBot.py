import telebot
from telebot import types
from config import TOKEN, keys
from extensions import ConvertionException, CriptoConverter

bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start', 'help'])
def start_htlp(message: telebot.types.Message):
    text = '\n________________________________________________________\n' \
           ' –î–∞–Ω–Ω—ã–π –±–æ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É, –≤—ã–±—Ä–∞–Ω–Ω—É—é ' \
           '–ø–æ–ª—å–∑–≤–∞—Ç–µ–ª–µ–º –∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –±–æ—Ç—É.\n' \
           ' –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å  —Ä–∞–±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É' \
           ' –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n <–∏–º—è –≤–∞–ª—é—Ç—ã>   <–≤ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏>  <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ–π –≤–∞–ª—é—Ç—ã>\n' \
           ' –£–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç /values'
    bot.reply_to(message, text)


@bot.message_handler(commands=['values'])
def values(message: telebot.types.Message):
    text = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:'
    for key in keys:
        text = '\n'.join([text, key])
    bot.reply_to(message, text)


@bot.message_handler(content_types=['text', ])
def convert(message: telebot.types.Message):
    try:
        values = message.text.split(' ')
        if len(values) != 3:
            raise ConvertionException('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ü§®')
        quote, base, amount = values
        total_base = CriptoConverter.convert(quote, base, amount)
    except ConvertionException as e:
        bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èü§∑‚Äç‚ôÇÔ∏è\n{e}')
    except Exception as e:
        bot.reply_to(message, f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n{e}ü§∑‚Äç‚ôÇÔ∏è')
    else:
        text = f'–¶–µ–Ω–∞ {amount} {quote} –≤ {base}–∞—Ö ‚û°Ô∏è {total_base}'
        bot.reply_to(message, text)


bot.polling()
